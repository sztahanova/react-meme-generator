{"version":3,"sources":["components/MemeGeneratorComponent.js","links.js","components/HeaderComponent.js","components/FooterComponent.js","theme.js","App.js","reportWebVitals.js","index.js"],"names":["MemeGenerator","theme","getTheme","styles","root","padding","backgroundColor","palette","white","buttonContainer","display","justifyContent","paddingBottom","formContainer","width","maxWidth","memeContainer","position","margin","memeImage","h2","textAlign","left","transform","fontFamily","fontSize","textTransform","color","letterSpacing","textShadow","top","bottom","useState","topText","setTopText","bottomText","setBottomText","randomImage","setRandomImage","originalSize","setOriginalSize","allMemeImages","setAllMemeImages","canvasRef","useRef","canvasContextRef","imageRef","getImages","useCallback","fetch","then","res","json","success","memes","data","useEffect","canvas","current","getContext","ctx","img","crossOrigin","onload","clearRect","height","drawImage","getLines","text","console","log","words","toUpperCase","split","lines","currentLine","i","length","word","measureText","push","getStyles","fieldGroup","borderColor","themePrimary","borderWidth","Stack","grow","horizontalAlign","tokens","childrenGap","style","PrimaryButton","onClick","event","preventDefault","randomIndex","Math","floor","random","randomMeme","url","TextField","value","placeholder","onChange","target","ref","alt","src","hidden","font","shadowColor","shadowBlur","lineWidth","fillStyle","forEach","line","index","strokeText","fillText","writeTopTextOnCanvas","reverse","writeBottomTextOnCanvas","link","document","createElement","download","href","toDataURL","click","Header","headerStyles","flexDirection","alignItems","gap","background","title","Image","Text","variant","block","nowrap","Footer","className","loadTheme","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","loadSztahanovaTheme","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mQA0OeA,EArOO,WACpB,IAAMC,EAAQC,cAERC,EAAS,CACbC,KAAM,CACJC,QAAS,GACTC,gBAAiBL,EAAMM,QAAQC,OAEjCC,gBAAiB,CACfC,QAAS,OACTC,eAAgB,SAChBC,cAAe,IAEjBC,cAAe,CACbC,MAAO,MACPC,SAAU,KAEZC,cAAe,CAAEC,SAAU,WAAYC,OAAQ,QAC/CC,UAAW,CAAEJ,SAAU,QACvBK,GAAI,CACFH,SAAU,WACVH,MAAO,MACPO,UAAW,SACXC,KAAM,MACNC,UAAW,mBACXL,OAAQ,SACRb,QAAS,QACTmB,WAAY,qBACZC,SAAU,GACVC,cAAe,YACfC,MAAO,QACPC,cAAe,EACfC,WACE,kJAEJC,IAAK,CACHA,IAAK,GAEPC,OAAQ,CACNA,OAAQ,IAvCc,EA2CIC,mBAAS,IA3Cb,mBA2CnBC,EA3CmB,KA2CVC,EA3CU,OA4CUF,mBAAS,IA5CnB,mBA4CnBG,EA5CmB,KA4CPC,EA5CO,OA6CYJ,mBCjDN,kCDIN,mBA6CnBK,EA7CmB,KA6CNC,EA7CM,OA8CcN,mBAAS,CAAC,IAAK,MA9C7B,mBA8CnBO,EA9CmB,KA8CLC,EA9CK,OA+CgBR,mBAAS,IA/CzB,mBA+CnBS,EA/CmB,KA+CJC,EA/CI,KAiDpBC,EAAYC,mBACZC,EAAmBD,mBACnBE,EAAWF,mBAEXG,EAAYC,uBAAY,WAC5BC,MCzDuB,qCD0DpBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,GAAIA,EAAIE,QAAS,CACf,IAAMC,EAAQH,EAAII,KAAKD,MACvBZ,EAAiBY,SAGtB,IACHE,qBAAU,kBAAMT,MAAa,CAACA,IAE9BS,qBAAU,WACR,IAAMC,EAASd,EAAUe,QACzBb,EAAiBa,QAAUD,EAAOE,WAAW,MAC7C,IAAMC,EAAMf,EAAiBa,QACvBG,EAAMf,EAASY,QAErBG,EAAIC,YAAc,YAElBD,EAAIE,OAAS,WACXH,EAAII,UAAU,EAAG,EAAGP,EAAO3C,MAAO2C,EAAOQ,QACzCL,EAAIH,OAAO3C,MAAQ+C,EAAI/C,MACvB8C,EAAIH,OAAOQ,OAASJ,EAAII,OACxBL,EAAIM,UAAUL,EAAK,EAAG,OAI1B,IAAMM,EAAW,SAACC,EAAMrD,GACtB,IAAM6C,EAAMf,EAAiBa,QAC7BW,QAAQC,IAAIF,GAKZ,IAJA,IAAIG,EAAQH,EAAKI,cAAcC,MAAM,KACjCC,EAAQ,GACRC,EAAcJ,EAAM,GAEfK,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAK,CACrC,IAAIE,EAAOP,EAAMK,GACLhB,EAAImB,YAAYJ,EAAc,IAAMG,GAAMhE,MAE1CC,EACV4D,GAAe,IAAMG,GAErBJ,EAAMM,KAAKL,GACXA,EAAcG,GAMlB,OAHAJ,EAAMM,KAAKL,GAEXN,QAAQC,IAAII,GACLA,GA2EHO,EAAY,WAChB,MAAO,CACLC,WAAY,CACV,CACEC,YAAalF,EAAMM,QAAQ6E,aAC3BC,YAAa,MAMrB,OACE,eAACC,EAAA,EAAD,CACEC,MAAI,EACJC,gBAAgB,SAChBC,OAAQ,CAAEC,YAAa,IACvBC,MAAOxF,EAAOC,KAJhB,UAME,qBAAKuF,MAAOxF,EAAOM,gBAAnB,SACE,cAACmF,EAAA,EAAD,CAAeC,QAlED,SAACC,GACnBA,EAAMC,iBAEN,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW1D,EAAcoC,QACvDuB,EAAa3D,EAAcuD,GAAaK,IAC9C7D,EAAgB,CACdC,EAAcuD,GAAalF,MAC3B2B,EAAcuD,GAAa/B,SAG7B/B,EAAW,IACXE,EAAc,IACdE,EAAe8D,IAsDX,2BAEF,eAACd,EAAA,EAAD,CAAOG,OAAQ,CAAEC,YAAa,IAAMC,MAAOxF,EAAOU,cAAlD,UACE,cAACyF,EAAA,EAAD,CACEC,MAAOtE,EACPuE,YAAY,WACZC,SAAU,SAACX,GAAD,OAAW5D,EAAW4D,EAAMY,OAAOH,QAC7CpG,OAAQ8E,EACRnE,MAAM,QAER,cAACwF,EAAA,EAAD,CACEC,MAAOpE,EACPqE,YAAY,cACZC,SAAU,SAACX,GAAD,OAAW1D,EAAc0D,EAAMY,OAAOH,QAChDpG,OAAQ8E,OAGZ,sBAAKU,MAAOxF,EAAOa,cAAnB,UACE,qBACE2F,IAAK7D,EACL8D,IAAI,cACJC,IAAKxE,EACLsD,MAAOxF,EAAOgB,YAEhB,oBAAIwE,MAAK,2BAAOxF,EAAOiB,IAAOjB,EAAO2B,KAArC,SAA6CG,IAC7C,oBAAI0D,MAAK,2BAAOxF,EAAOiB,IAAOjB,EAAO4B,QAArC,SAAgDI,OAElD,wBAAQwE,IAAKhE,EAAWmE,QAAM,IAC9B,cAAClB,EAAA,EAAD,CAAeC,QA/EI,SAACC,GACtBA,EAAMC,iBAD0B,kBAGRxD,EAHQ,GAGzBzB,EAHyB,KAGlBmD,EAHkB,KAI1BR,EAASd,EAAUe,QACnBE,EAAMf,EAAiBa,QACvBG,EAAMf,EAASY,QAErBG,EAAIC,YAAc,YAElBF,EAAII,UAAU,EAAG,EAAGP,EAAO3C,MAAO2C,EAAOQ,QACzCL,EAAIH,OAAO3C,MAAQA,EACnB8C,EAAIH,OAAOQ,OAASA,EACpBL,EAAIM,UAAUL,EAAK,EAAG,GACtBD,EAAImD,KAAO,cAEXnD,EAAIoD,YAAc,QAClBpD,EAAIvC,UAAY,SAChBuC,EAAIqD,WAAa,EACjBrD,EAAIsD,UAAY,EAChBtD,EAAIqD,WAAa,EACjBrD,EAAIuD,UAAY,QA7DW,WAAO,IAAD,cACT5E,EADS,GAC1BzB,EAD0B,KAE3B8C,GAF2B,KAErBf,EAAiBa,SACZS,EAASlC,EAASnB,GAG1BsG,SAAQ,SAACC,EAAMC,GACtB1D,EAAI2D,WAAWF,EAAMvG,EAAQ,EAHhB,MAG4BwG,GACzC1D,EAAI4D,SAASH,EAAMvG,EAAQ,EAJd,MAI0BwG,MAuDzCG,GAnD8B,WAAO,IAAD,cACZlF,EADY,GAC7BzB,EAD6B,KACtBmD,EADsB,KAE9BL,EAAMf,EAAiBa,QACTS,EAAShC,EAAYrB,GAAO4G,UAIpCN,SAAQ,SAACC,EAAMC,GACzB1D,EAAI2D,WAAWF,EAAMvG,EAAQ,EAAGmD,EAHb,GADN,GAI2CqD,GACxD1D,EAAI4D,SAASH,EAAMvG,EAAQ,EAAGmD,EAJX,GADN,GAKyCqD,MA2CxDK,GAEA,IAAIC,EAAOC,SAASC,cAAc,KAClCF,EAAKG,SAAW,qBAChBH,EAAKI,KAAOrF,EAAUe,QAAQuE,YAC9BL,EAAKM,SAkDH,+B,gBE5LSC,EAtCA,WACb,IAAMlI,EAAQC,cAERkI,EAAe,CACnBhI,KAAM,CACJ6D,OAAQ,IACRvD,QAAS,OACT2H,cAAe,MACfC,WAAY,SACZ3H,eAAgB,SAChB4H,IAAK,GACLC,WAAYvI,EAAMM,QAAQ6E,cAE5BqD,MAAO,CACL9G,MAAO1B,EAAMM,QAAQC,QAIzB,OACE,sBAAKmF,MAAOyC,EAAahI,KAAzB,UACE,cAACsI,EAAA,EAAD,CACE7B,IAAI,iEACJD,IAAI,WACJ3C,OAAQ,KAEV,cAAC0E,EAAA,EAAD,CAEEC,QAAQ,OACRC,OAAK,EACLC,QAAM,EACNnD,MAAOyC,EAAaK,MALtB,2BACM,aCbGM,EAbA,WACX,IAAM9I,EAAQC,cAEhB,OACE,yBAAQyF,MAAO,CAACrF,gBAAiBL,EAAMM,QAAQ6E,cAA/C,UACE,qBAAK4D,UAAU,oBACf,qBAAKrD,MAAO,CAACtE,UAAW,SAAUM,MAAO1B,EAAMM,QAAQC,OAAvD,SACE,cAACmI,EAAA,EAAD,sDCRoB,WAC1BM,YAAU,CACR1I,QAAS,CACP6E,aAAc,UACd8D,gBAAiB,UACjBC,aAAc,UACdC,WAAY,UACZC,cAAe,UACfC,eAAgB,UAChBC,aAAc,UACdC,UAAW,UACXC,YAAa,UACbC,kBAAmB,UACnBC,eAAgB,UAChBC,aAAc,UACdC,qBAAsB,UACtBC,kBAAmB,UACnBC,mBAAoB,UACpBC,gBAAiB,UACjBC,iBAAkB,UAClBC,kBAAmB,UACnBC,eAAgB,UAChBC,YAAa,UACbC,MAAO,UACP7J,MAAO,cCpBb8J,GAYeC,MAVf,WACE,OACE,eAACjF,EAAA,EAAD,CAAO0D,UAAU,MAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCDSwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxH,MAAK,YAAkD,IAA/CyH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASsD,eAAe,SAM1BX,M","file":"static/js/main.aacaa463.chunk.js","sourcesContent":["import { getTheme, PrimaryButton, Stack, TextField } from \"@fluentui/react\";\r\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { DEFAULT_MEME_IMAGE, MEME_IMAGES } from \"./../links\";\r\n\r\n\r\nconst MemeGenerator = () => {\r\n  const theme = getTheme();\r\n  \r\n  const styles = {\r\n    root: {\r\n      padding: 20,\r\n      backgroundColor: theme.palette.white,\r\n    },\r\n    buttonContainer: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      paddingBottom: 25,\r\n    },\r\n    formContainer: {\r\n      width: \"80%\",\r\n      maxWidth: 600,\r\n    },\r\n    memeContainer: { position: \"relative\", margin: \"auto\" },\r\n    memeImage: { maxWidth: \"100%\" },\r\n    h2: {\r\n      position: \"absolute\",\r\n      width: \"80%\",\r\n      textAlign: \"center\",\r\n      left: \"50%\",\r\n      transform: \"translateX(-50%)\",\r\n      margin: \"15px 0\",\r\n      padding: \"0 5px\",\r\n      fontFamily: \"impact, sans-serif\",\r\n      fontSize: 40,\r\n      textTransform: \"uppercase\",\r\n      color: \"white\",\r\n      letterSpacing: 1,\r\n      textShadow:\r\n        \"2px 2px 0 #000, -2px -2px 0 #000, 2px -2px 0 #000, -2px 2px 0 #000, 0 2px 0 #000, 2px 0 0 #000, 0 -2px 0 #000, -2px 0 0 #000, 2px 2px 5px #000\",\r\n    },\r\n    top: {\r\n      top: 0,\r\n    },\r\n    bottom: {\r\n      bottom: 0,\r\n    },\r\n  };\r\n\r\n  const [topText, setTopText] = useState(\"\");\r\n  const [bottomText, setBottomText] = useState(\"\");\r\n  const [randomImage, setRandomImage] = useState(DEFAULT_MEME_IMAGE);\r\n  const [originalSize, setOriginalSize] = useState([568, 335]);\r\n  const [allMemeImages, setAllMemeImages] = useState([]);\r\n\r\n  const canvasRef = useRef();\r\n  const canvasContextRef = useRef();\r\n  const imageRef = useRef();\r\n\r\n  const getImages = useCallback(() => {\r\n    fetch(MEME_IMAGES)\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.success) {\r\n          const memes = res.data.memes;\r\n          setAllMemeImages(memes);\r\n        }\r\n      });\r\n  }, []);\r\n  useEffect(() => getImages(), [getImages]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    canvasContextRef.current = canvas.getContext(\"2d\");\r\n    const ctx = canvasContextRef.current;\r\n    const img = imageRef.current;\r\n\r\n    img.crossOrigin = \"anonymous\";\r\n\r\n    img.onload = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.canvas.width = img.width;\r\n      ctx.canvas.height = img.height;\r\n      ctx.drawImage(img, 0, 0);\r\n    };\r\n  });\r\n\r\n  const getLines = (text, maxWidth) => {\r\n    const ctx = canvasContextRef.current;\r\n    console.log(text);\r\n    var words = text.toUpperCase().split(\" \");\r\n    var lines = [];\r\n    var currentLine = words[0];\r\n\r\n    for (var i = 1; i < words.length; i++) {\r\n      var word = words[i];\r\n      var width = ctx.measureText(currentLine + \" \" + word).width;\r\n\r\n      if (width < maxWidth) {\r\n        currentLine += \" \" + word;\r\n      } else {\r\n        lines.push(currentLine);\r\n        currentLine = word;\r\n      }\r\n    }\r\n    lines.push(currentLine);\r\n\r\n    console.log(lines);\r\n    return lines;\r\n  };\r\n\r\n  const writeTopTextOnCanvas = () => {\r\n    const [width, height] = originalSize;\r\n    const ctx = canvasContextRef.current;\r\n    const topLines = getLines(topText, width);\r\n    const offset = 40;\r\n\r\n    topLines.forEach((line, index) => {\r\n      ctx.strokeText(line, width / 2, offset + index * offset);\r\n      ctx.fillText(line, width / 2, offset + index * offset);\r\n    });\r\n  };\r\n\r\n  const writeBottomTextOnCanvas = () => {\r\n    const [width, height] = originalSize;\r\n    const ctx = canvasContextRef.current;\r\n    const bottomLines = getLines(bottomText, width).reverse();\r\n    const offset = 40;\r\n    const bottomOffset = 10;\r\n\r\n    bottomLines.forEach((line, index) => {\r\n      ctx.strokeText(line, width / 2, height - bottomOffset - index * offset);\r\n      ctx.fillText(line, width / 2, height - bottomOffset - index * offset);\r\n    });\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    const randomIndex = Math.floor(Math.random() * allMemeImages.length);\r\n    const randomMeme = allMemeImages[randomIndex].url;\r\n    setOriginalSize([\r\n      allMemeImages[randomIndex].width,\r\n      allMemeImages[randomIndex].height,\r\n    ]);\r\n\r\n    setTopText(\"\");\r\n    setBottomText(\"\");\r\n    setRandomImage(randomMeme);\r\n  };\r\n\r\n  const handleDownload = (event) => {\r\n    event.preventDefault();\r\n\r\n    const [width, height] = originalSize;\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvasContextRef.current;\r\n    const img = imageRef.current;\r\n\r\n    img.crossOrigin = \"anonymous\";\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.canvas.width = width;\r\n    ctx.canvas.height = height;\r\n    ctx.drawImage(img, 0, 0);\r\n    ctx.font = \"30px Impact\";\r\n\r\n    ctx.shadowColor = \"black\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.shadowBlur = 7;\r\n    ctx.lineWidth = 5;\r\n    ctx.shadowBlur = 0;\r\n    ctx.fillStyle = \"white\";\r\n\r\n    writeTopTextOnCanvas();\r\n    writeBottomTextOnCanvas();\r\n\r\n    var link = document.createElement(\"a\");\r\n    link.download = \"generated-meme.png\";\r\n    link.href = canvasRef.current.toDataURL();\r\n    link.click();\r\n  };\r\n\r\n  const getStyles = () => {\r\n    return {\r\n      fieldGroup: [\r\n        {\r\n          borderColor: theme.palette.themePrimary,\r\n          borderWidth: 2,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Stack\r\n      grow\r\n      horizontalAlign=\"center\"\r\n      tokens={{ childrenGap: 30 }}\r\n      style={styles.root}\r\n    >\r\n      <div style={styles.buttonContainer}>\r\n        <PrimaryButton onClick={handleClick}>Change meme</PrimaryButton>\r\n      </div>\r\n      <Stack tokens={{ childrenGap: 10 }} style={styles.formContainer}>\r\n        <TextField\r\n          value={topText}\r\n          placeholder=\"Top Text\"\r\n          onChange={(event) => setTopText(event.target.value)}\r\n          styles={getStyles}\r\n          width=\"45%\"\r\n        />\r\n        <TextField\r\n          value={bottomText}\r\n          placeholder=\"Bottom Text\"\r\n          onChange={(event) => setBottomText(event.target.value)}\r\n          styles={getStyles}\r\n        />\r\n      </Stack>\r\n      <div style={styles.memeContainer}>\r\n        <img\r\n          ref={imageRef}\r\n          alt=\"random-meme\"\r\n          src={randomImage}\r\n          style={styles.memeImage}\r\n        />\r\n        <h2 style={{ ...styles.h2, ...styles.top }}>{topText}</h2>\r\n        <h2 style={{ ...styles.h2, ...styles.bottom }}>{bottomText}</h2>\r\n      </div>\r\n      <canvas ref={canvasRef} hidden />\r\n      <PrimaryButton onClick={handleDownload}>Download meme</PrimaryButton>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default MemeGenerator;\r\n","export const TROLL_FACE_IMAGE = \"https://www.pikpng.com/pngl/b/47-476368_trollface-transparent-background-for-free-download-transparent-background.png\";\r\nexport const DEFAULT_MEME_IMAGE = \"https://i.imgflip.com/1bij.jpg\";\r\nexport const MEME_IMAGES = \"https://api.imgflip.com/get_memes\";","import { getTheme, Image, Text } from \"@fluentui/react\";\r\nimport React from \"react\";\r\n\r\nconst Header = () => {\r\n  const theme = getTheme();\r\n  \r\n  const headerStyles = {\r\n    root: {\r\n      height: 100,\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      gap: 25,\r\n      background: theme.palette.themePrimary,\r\n    },\r\n    title: {\r\n      color: theme.palette.white\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={headerStyles.root}>\r\n      <Image\r\n        src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n        alt=\"Problem?\"\r\n        height={80}\r\n      />\r\n      <Text\r\n        key=\"title\"\r\n        variant=\"mega\"\r\n        block\r\n        nowrap\r\n        style={headerStyles.title}\r\n      >\r\n        Meme Generator\r\n      </Text>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { getTheme, Text } from \"@fluentui/react\";\r\nimport React from \"react\";\r\n\r\nconst Footer = () => {\r\n    const theme = getTheme();\r\n\r\n  return (\r\n    <footer style={{backgroundColor: theme.palette.themePrimary}}>\r\n      <div className=\"empty-container\" />\r\n      <div style={{textAlign: \"center\", color: theme.palette.white}}>\r\n        <Text >Created with React and Fluent UI</Text>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { loadTheme } from \"@fluentui/react\";\r\n\r\nconst loadSztahanovaTheme = () =>\r\n  loadTheme({\r\n    palette: {\r\n      themePrimary: \"#c1d354\",\r\n      themeLighterAlt: \"#fcfdf7\",\r\n      themeLighter: \"#f4f8e0\",\r\n      themeLight: \"#ebf2c6\",\r\n      themeTertiary: \"#d9e593\",\r\n      themeSecondary: \"#c8d966\",\r\n      themeDarkAlt: \"#adbe4c\",\r\n      themeDark: \"#92a140\",\r\n      themeDarker: \"#6c772f\",\r\n      neutralLighterAlt: \"#32475c\",\r\n      neutralLighter: \"#32465a\",\r\n      neutralLight: \"#304357\",\r\n      neutralQuaternaryAlt: \"#2c3f51\",\r\n      neutralQuaternary: \"#2a3c4d\",\r\n      neutralTertiaryAlt: \"#29394a\",\r\n      neutralTertiary: \"#c8c8c8\",\r\n      neutralSecondary: \"#d0d0d0\",\r\n      neutralPrimaryAlt: \"#dadada\",\r\n      neutralPrimary: \"#ffffff\",\r\n      neutralDark: \"#f4f4f4\",\r\n      black: \"#f8f8f8\",\r\n      white: \"#34495e\",\r\n    },\r\n  });\r\n\r\nexport default loadSztahanovaTheme;\r\n","import MemeGenerator from './components/MemeGeneratorComponent';\nimport Header from './components/HeaderComponent';\nimport loadSztahanovaTheme from './theme';\nimport { Stack } from '@fluentui/react';\nimport Footer from './components/FooterComponent';\n\nloadSztahanovaTheme();\n\nfunction App() {\n  return (\n    <Stack className=\"App\">\n      <Header />\n      <MemeGenerator />\n      <Footer />\n    </Stack>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}